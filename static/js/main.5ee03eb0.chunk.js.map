{"version":3,"sources":["forms/FormInput.js","config.js","forms/RegistrationForm.js","forms/LoginForm.js","UserProfile.js","App.js","serviceWorker.js","index.js"],"names":["FormInput","props","label","value","name","type","onChange","e","className","error","SERVER_URL","RegistrationForm","handleInputChange","event","fields","state","target","checked","errors","firstName","length","lastName","validEmailRegex","RegExp","email","test","dateEntry","Date","date13yearsAgo","setFullYear","getFullYear","birthday","password","replyPassword","hasAccepted","setState","isSubmitButtonEnabled","renderErrorMessage","message","onSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","id","Math","floor","random","dateOfBirth","toISOString","split","username","then","response","status","isRegistrationSuccessful","json","data","alert","this","to","disabled","React","Component","LoginForm","isLoginSuccessful","console","log","keepLoggedIn","UserProfile","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5ee03eb0.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./FormInput.css\"\r\n\r\nexport function FormInput(props) {\r\n    return (\r\n        <label>\r\n            {props.label}\r\n            <input\r\n                value={props.value}\r\n                name={props.name}\r\n                type={props.type}\r\n                onChange={(e) => props.onChange(e)}\r\n            />\r\n            <div className=\"error-message\">{props.error}</div>\r\n        </label>\r\n    );\r\n}\r\n\r\n","export const SERVER_URL = \"https://social-ball-spring.herokuapp.com\";\r\n","import React from \"react\";\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport './CommonForm.css'\r\nimport {FormInput} from \"./FormInput\";\r\nimport {SERVER_URL} from \"../config\";\r\n\r\nexport class RegistrationForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fields: {\r\n                hasAccepted: false\r\n            },\r\n            errors: {},\r\n            isSubmitButtonEnabled: false,\r\n            isRegistrationSuccessful: false\r\n        }\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const fields = this.state.fields;\r\n        const target = event.target;\r\n        const name = target.name;\r\n        const value = name === \"hasAccepted\" ? target.checked : target.value;\r\n        fields[name] = value;\r\n\r\n        const errors = this.state.errors;\r\n        switch (name) {\r\n            case 'firstName':\r\n                errors.firstName =\r\n                    value.length < 1\r\n                        ? 'Imię nie moze być puste!'\r\n                        : null;\r\n                break;\r\n            case 'lastName':\r\n                errors.lastName =\r\n                    value.length < 1\r\n                        ? 'Nazwisko nie może być puste!'\r\n                        : null;\r\n                break;\r\n            case 'email':\r\n                const validEmailRegex =\r\n                    RegExp(/^(([^<>()\\\\[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\r\n                errors.email =\r\n                    validEmailRegex.test(value)\r\n                        ? null\r\n                        : 'To nie jest poprawny adres email';\r\n                break;\r\n            case 'birthday':\r\n                const dateEntry = new Date(value);\r\n                const date13yearsAgo = new Date();\r\n                date13yearsAgo.setFullYear(date13yearsAgo.getFullYear() - 13);\r\n                errors.birthday =\r\n                    dateEntry < date13yearsAgo\r\n                        ? null\r\n                        : 'Żeby samodzielnie się zarejestrować musisz mieć ukończone 13 lat';\r\n                break;\r\n            case 'password':\r\n                errors.password =\r\n                    value.length < 8\r\n                        ? 'Hasło musi mieć przynajmniej 8 znaków'\r\n                        : null;\r\n                break;\r\n            case 'replyPassword':\r\n                errors.replyPassword =\r\n                    value === fields.password ? null : 'Hasła muszą być identyczne';\r\n                break;\r\n            case 'hasAccepted':\r\n                errors.hasAccepted =\r\n                    value ? null : 'Zgoda jest wymagana';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState(\r\n            {\r\n                fields: fields,\r\n                errors: errors,\r\n                isSubmitButtonEnabled:\r\n                    errors.firstName === null\r\n                    && errors.lastName === null\r\n                    && errors.email === null\r\n                    && errors.password === null\r\n                    && errors.birthday === null\r\n                    && errors.replyPassword === null\r\n                    && errors.hasAccepted === null\r\n            });\r\n    };\r\n\r\n    renderErrorMessage = (message) => !message ? null : (<div className=\"error-message\">{message}</div>);\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const fields = this.state.fields;\r\n        fetch(`${SERVER_URL}/users`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                id: Math.floor((1000) * Math.random()), // TODO replace\r\n                firstName: fields.firstName,\r\n                lastName: fields.lastName,\r\n                dateOfBirth: new Date(fields.birthday).toISOString().split('T')[0],\r\n                password: fields.password,\r\n                email: fields.email,\r\n                username: fields.email\r\n            })\r\n        }).then((response) => {\r\n            if (response.status === 200) {\r\n                this.setState({\r\n                    isRegistrationSuccessful: true\r\n                })\r\n            }\r\n            return response.json();\r\n        }).then((data => {\r\n            if (data.message) {\r\n                alert(data.message)\r\n            }\r\n        }))\r\n    };\r\n\r\n    render() {\r\n        if (this.state.isRegistrationSuccessful === true) {\r\n            return <Redirect to='/login'/>\r\n        } else return (\r\n            <div className=\"registration-card\">\r\n                <h1>Rejestracja</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <FormInput\r\n                        label=\"Imię\"\r\n                        name=\"firstName\"\r\n                        type=\"text\"\r\n                        value={this.state.fields.firstName || ''}\r\n                        onChange={this.handleInputChange}\r\n                        error={this.state.errors.firstName}\r\n                    />\r\n                    <FormInput\r\n                        label=\"Nazwisko\"\r\n                        name=\"lastName\"\r\n                        type=\"text\"\r\n                        value={this.state.fields.lastName || ''}\r\n                        onChange={this.handleInputChange}\r\n                        error={this.state.errors.lastName}\r\n                    />\r\n                    <FormInput\r\n                        label=\"Data urodzenia\"\r\n                        name=\"birthday\"\r\n                        type=\"date\"\r\n                        value={this.state.fields.birthday || ''}\r\n                        onChange={this.handleInputChange}\r\n                        error={this.state.errors.birthday}\r\n                    />\r\n                    <FormInput\r\n                        label=\"Adres e-mail\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        value={this.state.fields.email || ''}\r\n                        onChange={this.handleInputChange}\r\n                        error={this.state.errors.email}\r\n                    />\r\n                    <FormInput\r\n                        label=\"Hasło\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        value={this.state.fields.password || ''}\r\n                        onChange={this.handleInputChange}\r\n                        error={this.state.errors.password}\r\n                    />\r\n                    <FormInput\r\n                        label=\"Powtórz hasło\"\r\n                        name=\"replyPassword\"\r\n                        type=\"replyPassword\"\r\n                        value={this.state.fields.replyPassword || ''}\r\n                        onChange={this.handleInputChange}\r\n                        error={this.state.errors.replyPassword}\r\n                    />\r\n                    <label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name=\"hasAccepted\"\r\n                            checked={this.state.fields.hasAccepted}\r\n                            onChange={this.handleInputChange}\r\n                        />\r\n                        Akceptuję warunki regulaminu (wymagane)\r\n                        {this.renderErrorMessage(this.state.errors.hasAccepted)}\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Zarejestruj się\" disabled={!this.state.isSubmitButtonEnabled}/>\r\n                    <p>Masz już konto? <Link to=\"/\">Przejdź do logowania</Link></p>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport \"./CommonForm.css\";\r\nimport \"./FormInput\"\r\nimport {FormInput} from \"./FormInput\";\r\nimport {SERVER_URL} from \"../config\";\r\n\r\nexport class LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fields: {\r\n                keepLoggedIn: false\r\n            },\r\n            errors: {},\r\n            isSubmitButtonEnabled: false,\r\n            isLoginSuccessful: false\r\n        };\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const fields = this.state.fields;\r\n        const target = event.target;\r\n        const name = target.name;\r\n        const value = name === \"keepLoggedIn\" ? target.checked : target.value;\r\n        fields[name] = value;\r\n\r\n        const errors = this.state.errors;\r\n        switch (name) {\r\n            case \"email\":\r\n                const validEmailRegex = RegExp(\r\n                    /^(([^<>()\\\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i\r\n                );\r\n                errors.email = validEmailRegex.test(value)\r\n                    ? null\r\n                    : \"To nie jest poprawny adres email\";\r\n                break;\r\n            case \"password\":\r\n                errors.password =\r\n                    value.length < 8\r\n                        ? \"Hasło musi mieć przynajmniej 8 znaków\"\r\n                        : null;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            fields: fields,\r\n            errors: errors,\r\n            isSubmitButtonEnabled:\r\n                errors.email === null && errors.password === null,\r\n        });\r\n    };\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        fetch(`${SERVER_URL}/token/generate-token`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(this.state.fields)\r\n        }).then((response) => {\r\n            if (response.status === 200) {\r\n                this.setState({\r\n                    isLoginSuccessful: true\r\n                });\r\n            }\r\n            console.log(response.status);\r\n            return response.json();\r\n        }).then((data => {\r\n            if (data.message) {\r\n                alert(data.message);\r\n            }\r\n        }))\r\n    };\r\n\r\n    render() {\r\n        if (this.state.isLoginSuccessful === true) {\r\n            return <Redirect to='/profile'/>\r\n        } else return (\r\n            <div className=\"registration-card\">\r\n                <h1>Logowanie</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <FormInput\r\n                        label=\"Adres e-mail\"\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        value={this.state.fields.email || \"\"}\r\n                        onChange={this.handleInputChange}\r\n                        error={this.state.errors.email}\r\n                    />\r\n                    <FormInput\r\n                        label=\"Hasło\"\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        value={this.state.fields.password || \"\"}\r\n                        onChange={this.handleInputChange}\r\n                        error={this.state.errors.password}\r\n                    />\r\n                    <label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name=\"keepLoggedIn\"\r\n                            checked={this.state.fields.keepLoggedIn}\r\n                            onChange={this.handleInputChange}\r\n                        />\r\n                        Nie wylogowuj mnie\r\n                    </label>\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Zaloguj się\"\r\n                        disabled={!this.state.isSubmitButtonEnabled}\r\n                    />\r\n                    <p>\r\n                        Nie masz konta? <Link to=\"/register\">Zarejestruj się!</Link>\r\n                    </p>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport function UserProfile() {\r\n    return (<span>Witaj na swoim profilu!</span>);\r\n}\r\n","import React from 'react';\r\nimport {RegistrationForm} from './forms/RegistrationForm';\r\nimport {LoginForm} from './forms/LoginForm';\r\nimport {UserProfile} from './UserProfile';\r\nimport './App.css';\r\nimport {HashRouter as Router, Route} from 'react-router-dom';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <div className=\"container\">\r\n                    <Route exact path=\"/\" component={LoginForm}/>\r\n                    <Route path=\"/login\" component={LoginForm}/>\r\n                    <Route path=\"/register\" component={RegistrationForm}/>\r\n                    <Route path=\"/profile\" component={UserProfile}/>\r\n                </div>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}